1.1

Написать запрос для получения дохода за последние 30 дней, в разбивке по названию
приложения и стране.

SELECT a.name, country, SUM(revenue)
FROM main m
JOIN apps a
	ON m.app_id = a.id
WHERE "date" > (CURRENT_DATE - INTERVAL '30 days')
GROUP BY a.name, country;

1.2

Так как есть вероятность, из-за разных настроек телефонов, того что одна и та же страна
может иметь в данных несколько названий, нужно подменить полное название страны на
ее код. Для этого требуется написать запрос который создаст дубликат таблицы
main_data, с замененным столбцом country и агрегирован так чтобы каждая когорта была
представлена одной строкой (под когортой подразумевается уникальное сочетание app_id,
country_code, date).

CREATE TABLE main_data AS
SELECT app_id, date,
countries.code AS country,
		SUM(installs) AS sum_installs,
		SUM(revenue) AS sum_revenue
FROM main
JOIN countries
	ON main.country = countries.name
GROUP BY app_id, countries.code, date;

1.3

Написать запрос который для каждой когорты и даты, будет рассчитывать долю дохода
данной когорты от всего дохода из страны когорты за соответствующий день и долю
дохода данной когорты от всего дохода из платформы (IOS/ANDROID) когорты за
соответствующий день.

SELECT m1.app_id,
		m1.date,
		m1.country,
		sum_revenue,
		sum_revenue/revenue_country_day AS cog_revenue_day,
		sum_revenue/platfrom_cog_revenue AS platf_cog_revenue_day
FROM main_data m1
JOIN
	(SELECT app_id,
	 	date,
	 	country,
	 	SUM(sum_revenue) AS revenue_country_day
	FROM main_data
	GROUP BY app_id, date, country) m2
ON m1.date = m2.date AND
	m1.country = m2.country AND
	m1.app_id = m2.app_id
JOIN
	(SELECT app_id,
	 	country, date,
	 	SUM(sum_revenue) AS platfrom_cog_revenue, platform
	FROM main_data md
	JOIN apps a1
	ON md.app_id = a1.id
	GROUP BY app_id, country, date, platform) m3
ON m1.date = m3.date AND
	m1.country = m3.country AND
	m1.app_id = m3.app_id;

1.4

Было обнаружено что app_id двух приложений перепутаны, поэтому требуется провести
замену app_id 226 на 274 и наоборот, замену требуется провести в main_data, с
перезаписью таблицы.

UPDATE main_data SET app_id = 226274
WHERE app_id = 226;
UPDATE main_data SET app_id = 274
WHERE app_id = 274;
UPDATE main_data SET app_id = 226
WHERE app_id = 226274;

1.5

Проагрегировать данные main_data по неделям (неделя начинается в понедельник и
заканчивается в воскресенье).

SELECT date_trunc('week', date) AS week,
		app_id,
		country,
		SUM(sum_revenue) AS sum_revenue,
		SUM(sum_installs) as sum_installs
FROM main_data
GROUP BY week, app_id, country, sum_revenue, sum_installs
ORDER BY week;


1.6

Требуется в одной таблице собрать данные из таблицы main_data, по таким условиям:
- После 2021-05-01 для Украины, России и Беларуси на приложениях 229 и 321
- Между 2021-01-01 и 2021-07-04 в США для приложения 704
- Германия с 2021-01-01 и до последней пятницы в приложении 568
- Страна Бразилия приложение 397, если оба условия совпали то данные после
2021-05-01, если только одно из двух условий совпало то данные до 2021-04-30.

SELECT *
FROM main_data
WHERE date > '2021-05-21' AND
		(country = 'Ua' OR country = 'Ru' OR country = 'By') AND
		(app_id = '229' OR app_id = '321')
UNION
SELECT *
FROM main_data
WHERE (date BETWEEN '2021-01-01' AND '2021-07-04') AND
		country = 'US' AND
		app_id = '704'
UNION
SELECT *
FROM main_data
WHERE (date BETWEEN '2021-01-01' AND '2021-08-06') AND
		country = 'De' AND
		app_id = '568'
UNION
SELECT *
FROM main_data
WHERE
	CASE
		WHEN country = 'Br' AND app_id = '568' THEN date > '2021-05-21'
		WHEN country = 'Br' OR app_id = '568' THEN date < '2021-04-30'
	END;

